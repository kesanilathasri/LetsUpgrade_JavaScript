Question 1. Explore and explain various methods in console function.

console in JavaScript:
A Web console is a tool which is mainly used to log information associated with a web page like: network requests, javascript, security errors, warnings, CSS etc.
It enables us to interact with a web page by executing javascript expression in the contents of the page.
In javascript, the console is an object which provides access to the browser debugging console. We can open a console in web browser by using: Ctrl + Shift + K for windows and Command + Option + K for Mac. 
The console object provides us with several different methods, like :
->log()
->error()
->warn()
->clear()
->time() and timeEnd()
->table()
->count()
->group() and groupEnd()
->custom console logs

1)console.log():Used to print the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc.
Ex: console.log('abc');  
	console.log(1); 
	console.log(true); 
	console.log(null); 
	console.log(undefined);  
	console.log([1, 2, 3, 4]); 
	console.log({a:1, b:2, c:3});
	
2)console.error():Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.
Ex: console.error('This is a simple error');

3)console.warn():Used to log warning message to the console. By default the warning message will be highlighted with yellow color.
Ex: console.warn('This is a warning.');  

4)console.clear():Used to clear the console. The console will be cleared, in case of Chrome a simple overlayed text will be printed like : ‘Console was cleared’ while in firefox no message is returned.
Ex: console.clear();  

5)console.time() and console.timeEnd():Whenever we want to know the amount of time spend by a block or a function, we can make use of the time() and timeEnd() methods provided by the javascript console object.
They take a label which must be same, and the code inside can be anything( function, object, simple console).
Ex: 
console.time('abc'); 
 let fun =  function(){ 
     console.log('fun is running'); 
 } 
 let fun2 = function(){ 
     console.log('fun2 is running..'); 
 } 
 fun(); 
 fun2(); 
console.timeEnd('abc'); 

6)console.table(): This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.
Ex: console.table({'a':1, 'b':2});

7)console.count(): This method is used to count the number that the function hit by this counting method.
Ex: 
for(let i=0;i<5;i++){ 
    console.count(i); 
} 

8)console.group() and console.groupEnd(): group() and groupEnd() methods of the console object allows us to group contents in a separate block, which will be indented. 
Just like the time() and the timeEnd() they also accepts label, again of same value.
Ex: console.group('simple'); 
    console.warn('warning!'); 
    console.error('error here'); 
    console.log('vivi vini vici'); 
	console.groupEnd('simple'); 
	console.log('new section'); 

Custom Console Logs: User can add Styling to the console logs in order to make logs Custom .
The Syntax for it is to add the css styling as a parameter to the logs which will replace %c in the logs as shown in the example below .
Ex: const spacing = '10px'; 
    const styles = `padding: ${spacing}; background-color: white; color: green; font-style: italic; border: 1px solid black; font-size: 2em;`; 
    console.log('%cGeeks for Geeks', styles); 

Question 2. Difference between var,let and const.

Var & Let:
var and let are both used for variable declaration in javascript but the difference between them is that var is function scoped and let is block scoped.
It can be said that a variable declared with var is defined throughout the program as compared to let.
Const:
ES6 introduced const keyword to define a new variable. The difference in const variable declaration than others is that it cannot be reassigned.
Example of var:
Input:
console.log(x);
var x=5;
console.log(x);
Output:
undefined
5

Example of let:
Input:
console.log(x);
let x=5;
console.log(x);
Output:
Error

Example of Const:
<script type="text/javascript"> 
    const x = 12; 
    x = 13; 
    x += 1; 
</script>
Output:
Uncaught TypeError: Assignment to constant variable.

Question 3. Write a brief intro on available datatypes in Javascript.

JavaScript has seven datatypes. Types are values that JavaScript can have. Below is a list of data types that JavaScript can have:
1.Number
2.String
3.Boolean
4.Undefined
5.Null
6.Object
7.Symbol
The Primitive Data types in JavaScript include Number, String, Boolean, Undefined, Null and Symbol.
The Non-Primitive data type has only one member i.e. the Object.

1)Numbers: A number data type can be an integer, a floating point value, an exponential value, a ‘NaN’ or a ‘Infinity’.
Ex: var a=250;  
	var b=25.5; 
	var c = 10e4
2)String: The string data type in JavaScript can be any group of characters enclosed by a single or double-quotes or by backticks.
Ex: var str1 = “This is a string1”;
	var str2= ‘This is a string2’;
	var str3 = `This is a string3`;
3)Boolean: The boolean data type has only two values, true and false. It is mostly used to check a logical condition. 
Thus Booleans are logical data types which can be used for comparison of two variables or to check a condition.
The true and false implies a ‘yes’ for ‘true’ and a ‘no’ for ‘false in some places when we check a condition or the existence of a variable or a value.
Ex: var a =5;
	var b=6;
	a==b
Output: False
4)Undefined: Undefined data type means a variable that is not defined. The variable is declared but doesn’t contain any value.
Ex: var a;
console.log(a);
Output: Undefined
5)Null: The null in JavaScript is a data type that is represented by only one value, the ‘null’ itself. A null value means no value.
Ex: var a = null;
	console.log(a);
Output: null
6)Symbol: The ‘symbol’ data type is new in es6. It is one of the new features of es6. The symbol data type defines a property of an object which is private to the object.
It refers to the ‘key’ of the key-value pair of an object.
Ex: var object1 = {
   name: ‘Shalini’,
   age: 25,
   city: ‘Mumbai’
}
var occupation=Symbol(‘engineer’);
7)Object: Let’s create an object literal. An object in JavaScript contains key-value pairs in its address. When we refer to obj1, we are actually referring to the address in memory which contains the value {a: 5, b: 6}, instead of the value {a: 5, b: 6} directly.
Ex: var obj1 = { a: 5, b: 6 };

